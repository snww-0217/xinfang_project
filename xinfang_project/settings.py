"""
Django settings for xinfang_project project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from logging.handlers import TimedRotatingFileHandler
import os
from datetime import time
from pathlib import Path
from dotenv import load_dotenv
import logging
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 加载.env 文件
load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f8ar08s3h^l8#)$oay*7mx6+m&rui3ha2u!+x3llj8ddnv0)a='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

MEDIA_URL = '/media/'  # 在 URL 中使用 /media/ 来访问上传的文件
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 存储文件的物理路径
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'xinfang_project',
    'consultation',
    'channels',
]

MIDDLEWARE = [
    'middleware.log_ip_middleware.LogIPMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 添加 CORS 中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# 添加响应头
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'unsafe-none'
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = 'unsafe-none'
ROOT_URLCONF = 'xinfang_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'xinfang_project.wsgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# 获取环境变量
#MYSQL_ROOT_PASSWORD = os.getenv('MYSQL_ROOT_PASSWORD')
#DB_PASSWORD = os.getenv('DB_PASSWORD')
ANSWER_CORRECT = os.getenv('ANSWER_CORRECT', 'default_answer')
MAX_TRIES = int(os.getenv('MAX_TRIES', 3))


print(f"ANSWER_CORRECT = {ANSWER_CORRECT}")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'xinfang',
        'USER': 'root',
        'PASSWORD': '12345678',
        'HOST':'172.17.0.1',  # 这里的 db 是指容器的名称，可能需要修改
        'PORT': 3306, 
    }
}


REDIS_HOST = '172.17.0.1'  # 在 docker-compose.yml 中定义的服务名
REDIS_PORT = 6379
REDIS_DB = 1
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static/",  # 确保这里指向了正确的文件夹
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 
LOGIN_URL = '/consultation/login/'  # 这里要改成你的实际登录路径

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

CORS_ALLOW_ALL_ORIGINS = True
MIGRATION_MODULES = {
    'app_name': None,  # 禁用某个应用的迁移（不推荐用于生产环境）
}

# 日志目录
log_dir = 'logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

#current_date = time.strftime('%Y%m%d', time.localtime())

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{asctime} - {levelname} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(log_dir, 'logging'), # 固定文件名，自动按日期轮转
            'when': 'midnight',  # 每天轮转一次
            'interval': 1,
            'backupCount': 7,  # 保留最近 7 天的日志
            'encoding': 'utf-8',
            'atTime': time(0, 0, 0),  # 在午夜轮转
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# 强制应用日志配置
logging.config.dictConfig(LOGGING)

# 测试日志
logger = logging.getLogger('django')
logger.info('Django 日志系统启动成功！')
